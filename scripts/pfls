#!/usr/bin/env python3
import os.path
import sys
import subprocess
import time
import argparse
import syslog
from socket import gethostname
import pfscripts as pfs


def main(parser):
    args = parser.parse_args()
    if not args:
        parser.print_help()
        sys.exit(1)
    config = pfs.Config(parser.prog)
    jid = pfs.get_jid()
    commands = pfs.Commands()
    commands.add("-w", pfs.Work.LS)
    commands.add("-j", jid)

    if config.logging:
        commands.add("-l")

    if args.exclude is not None:
        commands.add("-e")
        commands.add(parser.values.exclude)

    if args.verbose:
        commands.add("-v")

    # drop -i until we can make it make sense on command line
    # if options.input_list:
    #     commands.add("-i", options.input_list)

    if args.recursive:
        commands.add("-r")

    src_fixed = pfs.get_fixed_source(args.source_path)
    commands.add("-p", *src_fixed)

    pfcmd = pfs.Commands()
    pfcmd.add(config.mpirun)
    # should return the MPI installation root
    mpiroot = os.path.dirname(os.path.dirname(pfs.findexec(config.mpirun)))
    # this is a fix for "orted: command not found" issue
    pfcmd.add("-prefix", mpiroot)

    # Add darshan logging support if it is available
    # (this must be called after adding mpi)
    pfs.add_darshan(config, pfcmd)

    # Add in the dangerous flags that are necessary for running in production
    pfcmd.add("--oversubscribe")
    pfcmd.add("--allow-run-as-root")
    pfcmd.add("--map-by", "node")
    # Export marfs config env var to all procs
    pfcmd.add("-x", "MARFSCONFIGRC")
    if "all" not in config.node_list:
        pfcmd.add("-host", ",".join(config.node_list))
    pfcmd.add("-n", str(config.total_procs))
    pfcmd.add(pfs.PF.PFTOOL)
    pfcmd.add(*commands.commands)
    host = gethostname()
    print("Launched %s from host %s at: %s" % (
        sys.argv[0], host, time.strftime(
            "%a %b %d %H:%M:%S %Z %Y", time.localtime())))

    if config.logging:
        pfs.write_log("[pfls] [%s] Begin Date: %s" % (
            jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))
        pfs.write_log("[pfls] [%s] CMD %s" % (jid, pfcmd))

    status = subprocess.call(pfcmd.commands)
    if(status != 0):
        print("ERROR: %s failed" % sys.argv[0])
        if config.logging:
            pfs.write_log("[pfls] [%s] PFLS failed." % (jid), syslog.LOG_ERR)

    print("Job finished at: %s" %
          (time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))
    if config.logging:
        pfs.write_log("[pfls] [%s] Job End at: %s" % (
            jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))

    sys.exit(status)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        'pfls',
        usage="pfls [options] source_path",
        description="List file(s) from source_path in parallel"
    )

    parser.add_argument(
        'source_path',
        nargs='*',
        help=argparse.SUPPRESS
    )

    parser.add_argument(
        '-R',
        '--recursive',
        action='store_true',
        help='Recursive action',
        default=False
    )
    parser.add_argument(
        '-v',
        '--verbose',
        action='store_true',
        help='Verbose output',
        default=False
    )

    parser.add_argument(
        '-e',
        '--exclude',
        type=str,
        help='Exclude pattern',
        default=None
    )

    if len(sys.argv) < 2:
        parser.print_usage()
        sys.exit(1)

    main(parser)
