#!/usr/bin/env python
import os.path
import sys
import pwd
import grp
import subprocess
import random
from optparse import OptionParser
from pfscripts import *


def main():
    parser = OptionParser()
    parser.usage = "%prog [options] sourcePath destinationPath"
    parser.description = "%prog -- compare file(s) from sourcePath to destinationPath in parallel"
    parser.add_option("-R", dest="recurse", default=False,
                      action="store_true", help="compare directories recursively")
    parser.add_option("-M", dest="metadata", default=False, action="store_true",
                      help="changes to Block-by-Block vs Metadata only")
    parser.add_option("-p", dest="preserve", default=False, action="store_true",
                      help="consider user/group ownership when comparing metadata")
    parser.add_option("-v", dest="verbose", default=False,
                      action="store_true", help="verbose result output")
    parser.add_option("-e", dest="exclude", default=None,
                      metavar="PATTERN", help="exclude pattern")
    (options, args) = parser.parse_args()

    config = parse_config()

    if len(args) < 2:
        parser.error(
            "Specify the source and destination file/dir information.")

    jid = get_jid()
    src = args[:-1]
    dest = args[-1]
    commands = Commands()
    commands.add("-w", Work.COMPARE)
    commands.add("-j", jid)

    logging = False
    try:
        l = config.get("environment", "logging")
    except:
        parser.error(
            "please specify whether logging should be enabled (e.g. logging: True)")

    if l.lower() == "true":
        logging = True
        commands.add("-l")

    if options.metadata:
        commands.add("-M")

    if options.verbose:
        commands.add("-v")

    if options.preserve: 				# consider uid/gid for file comparisons
        command.add("-o")

    if options.exclude is not None:
        commands.add("-e")
        commands.add(parser.values.exclude)

    base_name = os.path.dirname(src[0])
    if options.recurse:
        commands.add("-r")
        for i in src:
            if os.path.dirname(i) != base_name:
                parser.error(
                    "All sources for a recursive compare must be contained within the same directory.")

    base_dest_name = os.path.dirname(dest)
    if base_dest_name and not os.path.exists(base_dest_name):
        parser.error("%s - No such file or directory" % (dest))

    # for i in src:
    #  if not os.path.exists(i):
    #    parser.error("cannot stat '%s': No such file or directory"%(i))
    try:
        writesize = config.get("options", "writesize")
        commands.add("-s", writesize)
    except:
        pass

    try:
        chunk_at = config.get("options", "chunk_at")
        chunksize = config.get("options", "chunksize")
        commands.add("-C", chunk_at)
        commands.add("-S", chunksize)
    except:
        pass

    src_full = []
    dest_full = []
    for i in src:
        src_full.append(os.path.realpath(i))
    dest_full.append(os.path.realpath(dest))

    src_fixed = []
    dest_fixed = []
    for i in src_full:
        if i.find("/var/lib/perceus/vnfs") != "-1":
            src_fixed.append(i.split('rootfs', 1)[-1])
        else:
            src_fixed.append(i)
    for j in dest_full:
        if j.find("/var/lib/perceus/vnfs") != "-1":
            dest_fixed.append(j.split('rootfs', 1)[-1])
        else:
            dest_fixed.append(j)

    commands.add("-c", *dest_fixed)
    commands.add("-p", *src_fixed)

    threaded = False
    try:
        t = config.get("environment", "threaded")
    except:
        parser.error(
            "please specify wheather the program is threaded or not in the environment section of the config file (e.g. threaded: True)")

    if t.lower() == "true":
        threaded = True

    pfcmd = Commands()
    num_procs = config.get("num_procs", "pfcm")

    if threaded:
        pfcmd.add(pftool)
        pfcmd.add("-nthread", num_procs)
    else:
        try:
            mpigo = config.get("environment", "mpirun")
        except:
            parser.error(
                "please specify the mpirun path in the environment section of the config file (e.g. mpirun: /path/to/mpirun)")

        try:
            host_list = map(lambda x: x[0].lower(), filter(
                lambda x: x[1] == "ON", config.items("active_nodes")))
        except:
            parser.error(
                "please specify at least 1 host in active_nodes section of the config file (e.g. localhost: ON)")

        pfcmd.add(mpigo)
        # should return the MPI installation root
        mpiroot = os.path.dirname(os.path.dirname(findexec(mpigo)))
        # this is a fix for "orted: command not found" issue
        pfcmd.add("-prefix", mpiroot)

        # Add darshan logging support if its available (this must be called after adding mpigo)
        add_darshan(config, pfcmd)

        # Add in the dangerous flags that are necessary for running in production
        pfcmd.add("--oversubscribe")
        pfcmd.add("--allow-run-as-root")
        pfcmd.add("--map-by", "node")
        # Export marfs config env var to all procs
        pfcmd.add("-x", "MARFSCONFIGRC")
        random.shuffle(host_list)
        if "all" not in host_list:
            pfcmd.add("-host", ",".join(host_list))
        pfcmd.add("-n", num_procs)
        pfcmd.add(pftool)

    pfcmd.add(*commands.commands)

    host = gethostname()
    print "Launched %s from host %s at: %s" % (sys.argv[0], host, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))

    if logging:
        write_log("[pfcm] [%s] Begin Date: %s" % (
            jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))
        write_log("[pfcm] [%s] CMD %s" % (jid, pfcmd))

    status = subprocess.call(pfcmd.commands)
    if(status != 0):
        print "ERROR: %s failed" % sys.argv[0]
        if logging:
            write_log("[pfcm] [%s] PFCM failed." % (jid), LOG_ERR)

    print "Job finished at: %s" % (time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))
    if logging:
        write_log("[pfcm] [%s] Job End at: %s" % (
            jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))

    sys.exit(status)


if __name__ == "__main__":
    main()
